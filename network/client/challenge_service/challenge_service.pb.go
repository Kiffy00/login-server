// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: challenge_service.proto

package challenge_service

import (
	attribute_types "bnet-mock/network/client/attribute_types"
	entity_types "bnet-mock/network/client/entity_types"
	rpc_types "bnet-mock/network/client/rpc_types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *uint32 `protobuf:"fixed32,1,req,name=type" json:"type,omitempty"`
	Info    *string `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Answer  *string `protobuf:"bytes,3,opt,name=answer" json:"answer,omitempty"`
	Retries *uint32 `protobuf:"varint,4,opt,name=retries" json:"retries,omitempty"`
}

func (x *Challenge) Reset() {
	*x = Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge) ProtoMessage() {}

func (x *Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge.ProtoReflect.Descriptor instead.
func (*Challenge) Descriptor() ([]byte, []int) {
	return file_challenge_service_proto_rawDescGZIP(), []int{0}
}

func (x *Challenge) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *Challenge) GetInfo() string {
	if x != nil && x.Info != nil {
		return *x.Info
	}
	return ""
}

func (x *Challenge) GetAnswer() string {
	if x != nil && x.Answer != nil {
		return *x.Answer
	}
	return ""
}

func (x *Challenge) GetRetries() uint32 {
	if x != nil && x.Retries != nil {
		return *x.Retries
	}
	return 0
}

type ChallengePickedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge            *uint32 `protobuf:"fixed32,1,req,name=challenge" json:"challenge,omitempty"`
	Id                   *uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	NewChallengeProtocol *bool   `protobuf:"varint,3,opt,name=new_challenge_protocol,json=newChallengeProtocol,def=0" json:"new_challenge_protocol,omitempty"`
}

// Default values for ChallengePickedRequest fields.
const (
	Default_ChallengePickedRequest_NewChallengeProtocol = bool(false)
)

func (x *ChallengePickedRequest) Reset() {
	*x = ChallengePickedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengePickedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengePickedRequest) ProtoMessage() {}

func (x *ChallengePickedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengePickedRequest.ProtoReflect.Descriptor instead.
func (*ChallengePickedRequest) Descriptor() ([]byte, []int) {
	return file_challenge_service_proto_rawDescGZIP(), []int{1}
}

func (x *ChallengePickedRequest) GetChallenge() uint32 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *ChallengePickedRequest) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ChallengePickedRequest) GetNewChallengeProtocol() bool {
	if x != nil && x.NewChallengeProtocol != nil {
		return *x.NewChallengeProtocol
	}
	return Default_ChallengePickedRequest_NewChallengeProtocol
}

type ChallengePickedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (x *ChallengePickedResponse) Reset() {
	*x = ChallengePickedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengePickedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengePickedResponse) ProtoMessage() {}

func (x *ChallengePickedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengePickedResponse.ProtoReflect.Descriptor instead.
func (*ChallengePickedResponse) Descriptor() ([]byte, []int) {
	return file_challenge_service_proto_rawDescGZIP(), []int{2}
}

func (x *ChallengePickedResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ChallengeAnsweredRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answer *string `protobuf:"bytes,1,req,name=answer" json:"answer,omitempty"`
	Data   []byte  `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	Id     *uint32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (x *ChallengeAnsweredRequest) Reset() {
	*x = ChallengeAnsweredRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeAnsweredRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeAnsweredRequest) ProtoMessage() {}

func (x *ChallengeAnsweredRequest) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeAnsweredRequest.ProtoReflect.Descriptor instead.
func (*ChallengeAnsweredRequest) Descriptor() ([]byte, []int) {
	return file_challenge_service_proto_rawDescGZIP(), []int{3}
}

func (x *ChallengeAnsweredRequest) GetAnswer() string {
	if x != nil && x.Answer != nil {
		return *x.Answer
	}
	return ""
}

func (x *ChallengeAnsweredRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChallengeAnsweredRequest) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type ChallengeAnsweredResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data           []byte `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	DoRetry        *bool  `protobuf:"varint,2,opt,name=do_retry,json=doRetry" json:"do_retry,omitempty"`
	RecordNotFound *bool  `protobuf:"varint,3,opt,name=record_not_found,json=recordNotFound" json:"record_not_found,omitempty"`
}

func (x *ChallengeAnsweredResponse) Reset() {
	*x = ChallengeAnsweredResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeAnsweredResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeAnsweredResponse) ProtoMessage() {}

func (x *ChallengeAnsweredResponse) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeAnsweredResponse.ProtoReflect.Descriptor instead.
func (*ChallengeAnsweredResponse) Descriptor() ([]byte, []int) {
	return file_challenge_service_proto_rawDescGZIP(), []int{4}
}

func (x *ChallengeAnsweredResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChallengeAnsweredResponse) GetDoRetry() bool {
	if x != nil && x.DoRetry != nil {
		return *x.DoRetry
	}
	return false
}

func (x *ChallengeAnsweredResponse) GetRecordNotFound() bool {
	if x != nil && x.RecordNotFound != nil {
		return *x.RecordNotFound
	}
	return false
}

type ChallengeCancelledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (x *ChallengeCancelledRequest) Reset() {
	*x = ChallengeCancelledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeCancelledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeCancelledRequest) ProtoMessage() {}

func (x *ChallengeCancelledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeCancelledRequest.ProtoReflect.Descriptor instead.
func (*ChallengeCancelledRequest) Descriptor() ([]byte, []int) {
	return file_challenge_service_proto_rawDescGZIP(), []int{5}
}

func (x *ChallengeCancelledRequest) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type SendChallengeToUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId        *rpc_types.ProcessId         `protobuf:"bytes,1,opt,name=peer_id,json=peerId" json:"peer_id,omitempty"`
	GameAccountId *entity_types.EntityId       `protobuf:"bytes,2,opt,name=game_account_id,json=gameAccountId" json:"game_account_id,omitempty"`
	Challenges    []*Challenge                 `protobuf:"bytes,3,rep,name=challenges" json:"challenges,omitempty"`
	Context       *uint32                      `protobuf:"fixed32,4,req,name=context" json:"context,omitempty"`
	Timeout       *uint64                      `protobuf:"varint,5,opt,name=timeout" json:"timeout,omitempty"`
	Attributes    []*attribute_types.Attribute `protobuf:"bytes,6,rep,name=attributes" json:"attributes,omitempty"`
	Host          *rpc_types.ProcessId         `protobuf:"bytes,7,opt,name=host" json:"host,omitempty"`
	AccountId     *entity_types.EntityId       `protobuf:"bytes,8,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *SendChallengeToUserRequest) Reset() {
	*x = SendChallengeToUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChallengeToUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChallengeToUserRequest) ProtoMessage() {}

func (x *SendChallengeToUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChallengeToUserRequest.ProtoReflect.Descriptor instead.
func (*SendChallengeToUserRequest) Descriptor() ([]byte, []int) {
	return file_challenge_service_proto_rawDescGZIP(), []int{6}
}

func (x *SendChallengeToUserRequest) GetPeerId() *rpc_types.ProcessId {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *SendChallengeToUserRequest) GetGameAccountId() *entity_types.EntityId {
	if x != nil {
		return x.GameAccountId
	}
	return nil
}

func (x *SendChallengeToUserRequest) GetChallenges() []*Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

func (x *SendChallengeToUserRequest) GetContext() uint32 {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return 0
}

func (x *SendChallengeToUserRequest) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *SendChallengeToUserRequest) GetAttributes() []*attribute_types.Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *SendChallengeToUserRequest) GetHost() *rpc_types.ProcessId {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *SendChallengeToUserRequest) GetAccountId() *entity_types.EntityId {
	if x != nil {
		return x.AccountId
	}
	return nil
}

type SendChallengeToUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (x *SendChallengeToUserResponse) Reset() {
	*x = SendChallengeToUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChallengeToUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChallengeToUserResponse) ProtoMessage() {}

func (x *SendChallengeToUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChallengeToUserResponse.ProtoReflect.Descriptor instead.
func (*SendChallengeToUserResponse) Descriptor() ([]byte, []int) {
	return file_challenge_service_proto_rawDescGZIP(), []int{7}
}

func (x *SendChallengeToUserResponse) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type ChallengeUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenges    []*Challenge                 `protobuf:"bytes,1,rep,name=challenges" json:"challenges,omitempty"`
	Context       *uint32                      `protobuf:"fixed32,2,req,name=context" json:"context,omitempty"`
	Id            *uint32                      `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Deadline      *uint64                      `protobuf:"varint,4,opt,name=deadline" json:"deadline,omitempty"`
	Attributes    []*attribute_types.Attribute `protobuf:"bytes,5,rep,name=attributes" json:"attributes,omitempty"`
	GameAccountId *entity_types.EntityId       `protobuf:"bytes,6,opt,name=game_account_id,json=gameAccountId" json:"game_account_id,omitempty"`
}

func (x *ChallengeUserRequest) Reset() {
	*x = ChallengeUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeUserRequest) ProtoMessage() {}

func (x *ChallengeUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeUserRequest.ProtoReflect.Descriptor instead.
func (*ChallengeUserRequest) Descriptor() ([]byte, []int) {
	return file_challenge_service_proto_rawDescGZIP(), []int{8}
}

func (x *ChallengeUserRequest) GetChallenges() []*Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

func (x *ChallengeUserRequest) GetContext() uint32 {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return 0
}

func (x *ChallengeUserRequest) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ChallengeUserRequest) GetDeadline() uint64 {
	if x != nil && x.Deadline != nil {
		return *x.Deadline
	}
	return 0
}

func (x *ChallengeUserRequest) GetAttributes() []*attribute_types.Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ChallengeUserRequest) GetGameAccountId() *entity_types.EntityId {
	if x != nil {
		return x.GameAccountId
	}
	return nil
}

type ChallengeResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type    *uint32 `protobuf:"fixed32,2,opt,name=type" json:"type,omitempty"`
	ErrorId *uint32 `protobuf:"varint,3,opt,name=error_id,json=errorId" json:"error_id,omitempty"`
	Answer  []byte  `protobuf:"bytes,4,opt,name=answer" json:"answer,omitempty"`
}

func (x *ChallengeResultRequest) Reset() {
	*x = ChallengeResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeResultRequest) ProtoMessage() {}

func (x *ChallengeResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeResultRequest.ProtoReflect.Descriptor instead.
func (*ChallengeResultRequest) Descriptor() ([]byte, []int) {
	return file_challenge_service_proto_rawDescGZIP(), []int{9}
}

func (x *ChallengeResultRequest) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ChallengeResultRequest) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *ChallengeResultRequest) GetErrorId() uint32 {
	if x != nil && x.ErrorId != nil {
		return *x.ErrorId
	}
	return 0
}

func (x *ChallengeResultRequest) GetAnswer() []byte {
	if x != nil {
		return x.Answer
	}
	return nil
}

type ChallengeExternalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestToken *string `protobuf:"bytes,1,opt,name=request_token,json=requestToken" json:"request_token,omitempty"`
	PayloadType  *string `protobuf:"bytes,2,opt,name=payload_type,json=payloadType" json:"payload_type,omitempty"`
	Payload      []byte  `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
}

func (x *ChallengeExternalRequest) Reset() {
	*x = ChallengeExternalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeExternalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeExternalRequest) ProtoMessage() {}

func (x *ChallengeExternalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeExternalRequest.ProtoReflect.Descriptor instead.
func (*ChallengeExternalRequest) Descriptor() ([]byte, []int) {
	return file_challenge_service_proto_rawDescGZIP(), []int{10}
}

func (x *ChallengeExternalRequest) GetRequestToken() string {
	if x != nil && x.RequestToken != nil {
		return *x.RequestToken
	}
	return ""
}

func (x *ChallengeExternalRequest) GetPayloadType() string {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return ""
}

func (x *ChallengeExternalRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ChallengeExternalResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestToken *string `protobuf:"bytes,1,opt,name=request_token,json=requestToken" json:"request_token,omitempty"`
	Passed       *bool   `protobuf:"varint,2,opt,name=passed,def=1" json:"passed,omitempty"`
}

// Default values for ChallengeExternalResult fields.
const (
	Default_ChallengeExternalResult_Passed = bool(true)
)

func (x *ChallengeExternalResult) Reset() {
	*x = ChallengeExternalResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeExternalResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeExternalResult) ProtoMessage() {}

func (x *ChallengeExternalResult) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeExternalResult.ProtoReflect.Descriptor instead.
func (*ChallengeExternalResult) Descriptor() ([]byte, []int) {
	return file_challenge_service_proto_rawDescGZIP(), []int{11}
}

func (x *ChallengeExternalResult) GetRequestToken() string {
	if x != nil && x.RequestToken != nil {
		return *x.RequestToken
	}
	return ""
}

func (x *ChallengeExternalResult) GetPassed() bool {
	if x != nil && x.Passed != nil {
		return *x.Passed
	}
	return Default_ChallengeExternalResult_Passed
}

var File_challenge_service_proto protoreflect.FileDescriptor

var file_challenge_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x62, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x15, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0f, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x6b, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x07, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x83, 0x01,
	0x0a, 0x16, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x69, 0x63, 0x6b, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x07, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x16, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x14, 0x6e,
	0x65, 0x77, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x22, 0x33, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x50, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x19,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6f, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x6f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x2b, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa5, 0x03, 0x0a, 0x1a, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x52, 0x06,
	0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x07, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x2d, 0x0a,
	0x1b, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9b, 0x02, 0x0a,
	0x14, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x07, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x52, 0x0d, 0x67, 0x61, 0x6d,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x16, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x22, 0x7c, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x5c, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1c, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x32, 0xbb, 0x04,
	0x0a, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x7e, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50,
	0x69, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x31, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x69, 0x63, 0x6b, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x69,
	0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x12, 0x84, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x12, 0x33, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x12, 0x66, 0x0a, 0x12, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12,
	0x34, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x22, 0x04, 0x80, 0xb5, 0x18,
	0x03, 0x12, 0x8a, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x1a, 0x2b,
	0xca, 0x3e, 0x28, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x32, 0xec, 0x03, 0x0a, 0x11,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x12, 0x63, 0x0a, 0x0f, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0x67, 0x0a, 0x11, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x2e, 0x62, 0x67,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x4f,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x12,
	0x6b, 0x0a, 0x13, 0x4f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x33, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x67,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x4f, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x12, 0x70, 0x0a, 0x19,
	0x4f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x2e, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x19, 0x2e,
	0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x4f, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x1a, 0x2a,
	0xca, 0x3e, 0x27, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x31, 0x48, 0x01, 0x5a, 0x2a,
	0x62, 0x6e, 0x65, 0x74, 0x2d, 0x6d, 0x6f, 0x63, 0x6b, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x80, 0x01, 0x00,
}

var (
	file_challenge_service_proto_rawDescOnce sync.Once
	file_challenge_service_proto_rawDescData = file_challenge_service_proto_rawDesc
)

func file_challenge_service_proto_rawDescGZIP() []byte {
	file_challenge_service_proto_rawDescOnce.Do(func() {
		file_challenge_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_challenge_service_proto_rawDescData)
	})
	return file_challenge_service_proto_rawDescData
}

var file_challenge_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_challenge_service_proto_goTypes = []interface{}{
	(*Challenge)(nil),                   // 0: bgs.protocol.challenge.v1.Challenge
	(*ChallengePickedRequest)(nil),      // 1: bgs.protocol.challenge.v1.ChallengePickedRequest
	(*ChallengePickedResponse)(nil),     // 2: bgs.protocol.challenge.v1.ChallengePickedResponse
	(*ChallengeAnsweredRequest)(nil),    // 3: bgs.protocol.challenge.v1.ChallengeAnsweredRequest
	(*ChallengeAnsweredResponse)(nil),   // 4: bgs.protocol.challenge.v1.ChallengeAnsweredResponse
	(*ChallengeCancelledRequest)(nil),   // 5: bgs.protocol.challenge.v1.ChallengeCancelledRequest
	(*SendChallengeToUserRequest)(nil),  // 6: bgs.protocol.challenge.v1.SendChallengeToUserRequest
	(*SendChallengeToUserResponse)(nil), // 7: bgs.protocol.challenge.v1.SendChallengeToUserResponse
	(*ChallengeUserRequest)(nil),        // 8: bgs.protocol.challenge.v1.ChallengeUserRequest
	(*ChallengeResultRequest)(nil),      // 9: bgs.protocol.challenge.v1.ChallengeResultRequest
	(*ChallengeExternalRequest)(nil),    // 10: bgs.protocol.challenge.v1.ChallengeExternalRequest
	(*ChallengeExternalResult)(nil),     // 11: bgs.protocol.challenge.v1.ChallengeExternalResult
	(*rpc_types.ProcessId)(nil),         // 12: bgs.protocol.ProcessId
	(*entity_types.EntityId)(nil),       // 13: bgs.protocol.EntityId
	(*attribute_types.Attribute)(nil),   // 14: bgs.protocol.Attribute
	(*rpc_types.NoData)(nil),            // 15: bgs.protocol.NoData
	(*rpc_types.NO_RESPONSE)(nil),       // 16: bgs.protocol.NO_RESPONSE
}
var file_challenge_service_proto_depIdxs = []int32{
	12, // 0: bgs.protocol.challenge.v1.SendChallengeToUserRequest.peer_id:type_name -> bgs.protocol.ProcessId
	13, // 1: bgs.protocol.challenge.v1.SendChallengeToUserRequest.game_account_id:type_name -> bgs.protocol.EntityId
	0,  // 2: bgs.protocol.challenge.v1.SendChallengeToUserRequest.challenges:type_name -> bgs.protocol.challenge.v1.Challenge
	14, // 3: bgs.protocol.challenge.v1.SendChallengeToUserRequest.attributes:type_name -> bgs.protocol.Attribute
	12, // 4: bgs.protocol.challenge.v1.SendChallengeToUserRequest.host:type_name -> bgs.protocol.ProcessId
	13, // 5: bgs.protocol.challenge.v1.SendChallengeToUserRequest.account_id:type_name -> bgs.protocol.EntityId
	0,  // 6: bgs.protocol.challenge.v1.ChallengeUserRequest.challenges:type_name -> bgs.protocol.challenge.v1.Challenge
	14, // 7: bgs.protocol.challenge.v1.ChallengeUserRequest.attributes:type_name -> bgs.protocol.Attribute
	13, // 8: bgs.protocol.challenge.v1.ChallengeUserRequest.game_account_id:type_name -> bgs.protocol.EntityId
	1,  // 9: bgs.protocol.challenge.v1.ChallengeService.ChallengePicked:input_type -> bgs.protocol.challenge.v1.ChallengePickedRequest
	3,  // 10: bgs.protocol.challenge.v1.ChallengeService.ChallengeAnswered:input_type -> bgs.protocol.challenge.v1.ChallengeAnsweredRequest
	5,  // 11: bgs.protocol.challenge.v1.ChallengeService.ChallengeCancelled:input_type -> bgs.protocol.challenge.v1.ChallengeCancelledRequest
	6,  // 12: bgs.protocol.challenge.v1.ChallengeService.SendChallengeToUser:input_type -> bgs.protocol.challenge.v1.SendChallengeToUserRequest
	8,  // 13: bgs.protocol.challenge.v1.ChallengeListener.OnChallengeUser:input_type -> bgs.protocol.challenge.v1.ChallengeUserRequest
	9,  // 14: bgs.protocol.challenge.v1.ChallengeListener.OnChallengeResult:input_type -> bgs.protocol.challenge.v1.ChallengeResultRequest
	10, // 15: bgs.protocol.challenge.v1.ChallengeListener.OnExternalChallenge:input_type -> bgs.protocol.challenge.v1.ChallengeExternalRequest
	11, // 16: bgs.protocol.challenge.v1.ChallengeListener.OnExternalChallengeResult:input_type -> bgs.protocol.challenge.v1.ChallengeExternalResult
	2,  // 17: bgs.protocol.challenge.v1.ChallengeService.ChallengePicked:output_type -> bgs.protocol.challenge.v1.ChallengePickedResponse
	4,  // 18: bgs.protocol.challenge.v1.ChallengeService.ChallengeAnswered:output_type -> bgs.protocol.challenge.v1.ChallengeAnsweredResponse
	15, // 19: bgs.protocol.challenge.v1.ChallengeService.ChallengeCancelled:output_type -> bgs.protocol.NoData
	7,  // 20: bgs.protocol.challenge.v1.ChallengeService.SendChallengeToUser:output_type -> bgs.protocol.challenge.v1.SendChallengeToUserResponse
	16, // 21: bgs.protocol.challenge.v1.ChallengeListener.OnChallengeUser:output_type -> bgs.protocol.NO_RESPONSE
	16, // 22: bgs.protocol.challenge.v1.ChallengeListener.OnChallengeResult:output_type -> bgs.protocol.NO_RESPONSE
	16, // 23: bgs.protocol.challenge.v1.ChallengeListener.OnExternalChallenge:output_type -> bgs.protocol.NO_RESPONSE
	16, // 24: bgs.protocol.challenge.v1.ChallengeListener.OnExternalChallengeResult:output_type -> bgs.protocol.NO_RESPONSE
	17, // [17:25] is the sub-list for method output_type
	9,  // [9:17] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_challenge_service_proto_init() }
func file_challenge_service_proto_init() {
	if File_challenge_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_challenge_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengePickedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengePickedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeAnsweredRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeAnsweredResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeCancelledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChallengeToUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChallengeToUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeExternalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeExternalResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_challenge_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_challenge_service_proto_goTypes,
		DependencyIndexes: file_challenge_service_proto_depIdxs,
		MessageInfos:      file_challenge_service_proto_msgTypes,
	}.Build()
	File_challenge_service_proto = out.File
	file_challenge_service_proto_rawDesc = nil
	file_challenge_service_proto_goTypes = nil
	file_challenge_service_proto_depIdxs = nil
}
