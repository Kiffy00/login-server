// Code generated by protoc-gen-go-bnet. DO NOT EDIT.

package authentication_service

import (
	entity_types "bnet-mock/network/client/entity_types"
)

import (
	"context"
	"fmt"
	"strings"
	"google.golang.org/protobuf/proto"
)

// AuthenticationListenerHandler is the handler interface for bgs.protocol.authentication.v1.AuthenticationListener
type AuthenticationListenerHandler struct {
	serviceHash uint32
	service     AuthenticationListener
}

// NewAuthenticationListenerHandler creates a new AuthenticationListenerHandler
func NewAuthenticationListenerHandler(service AuthenticationListener) *AuthenticationListenerHandler {
	return &AuthenticationListenerHandler{
		serviceHash: AuthenticationListenerOriginalFullyQualifiedDescriptorNameHash,
		service:     service,
	}
}

// GetServiceHash returns the service hash
func (h *AuthenticationListenerHandler) GetServiceHash() uint32 {
	return h.serviceHash
}

// GetServiceFullName returns the service
func (h *AuthenticationListenerHandler) GetServiceFullName() string {
	return AuthenticationListenerOriginalFullyQualifiedDescriptorName
}

// GetServiceFullName returns the service
func (h *AuthenticationListenerHandler) GetServiceName() string {
	return AuthenticationListenerOriginalFullyQualifiedDescriptorName[strings.LastIndex(AuthenticationListenerOriginalFullyQualifiedDescriptorName, ".")+1:]
}

// GetService returns the service
func (h *AuthenticationListenerHandler) GetService() AuthenticationListener {
	return h.service
}

// Call calls the service by hash and method id on the handlers service
func (h *AuthenticationListenerHandler) Call(ctx context.Context, methodId uint32, body []byte, conn interface{}) error {
	switch methodId {
	case 1:
		var req ModuleLoadRequest
		if err := proto.Unmarshal(body, &req); err != nil {
			return err
		}
		return h.service.OnModuleLoad(ctx, &req, conn)
	case 2:
		var req ModuleMessageRequest
		if err := proto.Unmarshal(body, &req); err != nil {
			return err
		}
		return h.service.OnModuleMessage(ctx, &req, conn)
	case 4:
		var req ServerStateChangeRequest
		if err := proto.Unmarshal(body, &req); err != nil {
			return err
		}
		return h.service.OnServerStateChange(ctx, &req, conn)
	case 5:
		var req LogonResult
		if err := proto.Unmarshal(body, &req); err != nil {
			return err
		}
		return h.service.OnLogonComplete(ctx, &req, conn)
	case 6:
		var req MemModuleLoadRequest
		if err := proto.Unmarshal(body, &req); err != nil {
			return err
		}
		return h.service.OnMemModuleLoad(ctx, &req, conn)
	case 10:
		var req LogonUpdateRequest
		if err := proto.Unmarshal(body, &req); err != nil {
			return err
		}
		return h.service.OnLogonUpdate(ctx, &req, conn)
	case 11:
		var req VersionInfoNotification
		if err := proto.Unmarshal(body, &req); err != nil {
			return err
		}
		return h.service.OnVersionInfoUpdated(ctx, &req, conn)
	case 12:
		var req LogonQueueUpdateRequest
		if err := proto.Unmarshal(body, &req); err != nil {
			return err
		}
		return h.service.OnLogonQueueUpdate(ctx, &req, conn)
	case 13:
		return h.service.OnLogonQueueEnd(ctx, nil, conn)
	case 14:
		var req GameAccountSelectedRequest
		if err := proto.Unmarshal(body, &req); err != nil {
			return err
		}
		return h.service.OnGameAccountSelected(ctx, &req, conn)
	default:
		return fmt.Errorf("unknown method id %d", methodId)
	}
}

// AuthenticationServiceHandler is the handler interface for bgs.protocol.authentication.v1.AuthenticationService
type AuthenticationServiceHandler struct {
	serviceHash uint32
	service     AuthenticationService
}

// NewAuthenticationServiceHandler creates a new AuthenticationServiceHandler
func NewAuthenticationServiceHandler(service AuthenticationService) *AuthenticationServiceHandler {
	return &AuthenticationServiceHandler{
		serviceHash: AuthenticationServiceOriginalFullyQualifiedDescriptorNameHash,
		service:     service,
	}
}

// GetServiceHash returns the service hash
func (h *AuthenticationServiceHandler) GetServiceHash() uint32 {
	return h.serviceHash
}

// GetServiceFullName returns the service
func (h *AuthenticationServiceHandler) GetServiceFullName() string {
	return AuthenticationServiceOriginalFullyQualifiedDescriptorName
}

// GetServiceFullName returns the service
func (h *AuthenticationServiceHandler) GetServiceName() string {
	return AuthenticationServiceOriginalFullyQualifiedDescriptorName[strings.LastIndex(AuthenticationServiceOriginalFullyQualifiedDescriptorName, ".")+1:]
}

// GetService returns the service
func (h *AuthenticationServiceHandler) GetService() AuthenticationService {
	return h.service
}

// Call calls the service by hash and method id on the handlers service
func (h *AuthenticationServiceHandler) Call(ctx context.Context, methodId uint32, body []byte, conn interface{}) error {
	switch methodId {
	case 1:
		var req LogonRequest
		if err := proto.Unmarshal(body, &req); err != nil {
			return err
		}
		return h.service.Logon(ctx, &req, conn)
	case 2:
		var req ModuleNotification
		if err := proto.Unmarshal(body, &req); err != nil {
			return err
		}
		return h.service.ModuleNotify(ctx, &req, conn)
	case 3:
		var req ModuleMessageRequest
		if err := proto.Unmarshal(body, &req); err != nil {
			return err
		}
		return h.service.ModuleMessage(ctx, &req, conn)
	case 4:
		var req entity_types.EntityId
		if err := proto.Unmarshal(body, &req); err != nil {
			return err
		}
		return h.service.SelectGameAccount_DEPRECATED(ctx, &req, conn)
	case 5:
		var req GenerateSSOTokenRequest
		if err := proto.Unmarshal(body, &req); err != nil {
			return err
		}
		return h.service.GenerateSSOToken(ctx, &req, conn)
	case 6:
		var req SelectGameAccountRequest
		if err := proto.Unmarshal(body, &req); err != nil {
			return err
		}
		return h.service.SelectGameAccount(ctx, &req, conn)
	case 7:
		var req VerifyWebCredentialsRequest
		if err := proto.Unmarshal(body, &req); err != nil {
			return err
		}
		return h.service.VerifyWebCredentials(ctx, &req, conn)
	case 8:
		var req GenerateWebCredentialsRequest
		if err := proto.Unmarshal(body, &req); err != nil {
			return err
		}
		return h.service.GenerateWebCredentials(ctx, &req, conn)
	default:
		return fmt.Errorf("unknown method id %d", methodId)
	}
}
